name: nodejs-build

on:
  workflow_call:
    inputs:
      env:
        type: string
        required: true
      app:
        type: string
        required: true
      stack:
        type: string
        required: true
      ecr_region:
        type: string
        required: true
      build_env_exec_s3_path:
        type: string
        required: true
      tag:
        type: string
        required: true
      github_sha:
        type: string
        required: true
    secrets:
      grid_uat_gha_action_role:
        required: true
      grid_prod_repo_prefix:
        required: true
      grid_env_gha_action_role:
        required: true
      grid_github_token:
        required: true

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      github_actions_role_secret: ${{ steps.variables.outputs.github_actions_role_secret }}
      github_short_sha: ${{ steps.variables.outputs.github_short_sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.github_sha }}
      - id: variables
        run: |
          env_upper=$(echo ${{ inputs.env }} | tr '[:lower:]' '[:upper:]')
          env_upper=${env_upper//-/_}
          github_actions_role_secret="GRID_${env_upper}_GHA_ACTION_ROLE"
          github_sha=${{ inputs.github_sha }}
          github_short_sha=${github_sha:0:7}
          echo "::set-output name=github_actions_role_secret::${github_actions_role_secret}"
          echo "::set-output name=github_short_sha::${github_short_sha}"

  package:
    runs-on: ubuntu-latest
    needs: [set-env]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.set-env.outputs.github_sha }}
      
      # setup aws credentials for uat to pull the ecr image
      
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.ecr_region }}
          role-to-assume: ${{ secrets.grid_uat_gha_action_role }}
      - uses: aws-actions/amazon-ecr-login@v1
      - name: Pull latest develop image for cache
        run: docker pull ${{ secrets.grid_prod_repo_prefix }}/${{ env.APP }}:latest || true

      # setup aws credentials for input env to pull the ssm parameters and run docker build

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.ecr_region }}
          role-to-assume: ${{ secrets.grid_env_gha_action_role }}
      - name: Curl build-env-var
        run: |
          curl ${{ inputs.build_env_exec_s3_path }} --output build-env-var.linux-amd64
          chmod +x build-env-var.linux-amd64
      - uses: aws-actions/amazon-ecr-login@v1
      - name: Pull latest develop image for cache
        run: docker pull ${{ secrets.grid_prod_repo_prefix }}/${{ env.APP }}:latest || true
      - name: Docker build
        run: |
          ARTEFACT_TAG=${{ inputs.tag }}
          eval $(./build-env-var.linux-amd64 -ssmPrefix=/${{ inputs.env }}/${{ inputs.stack }}/${{ inputs.app }} -pathLookup -envStdout)
          curl \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.grid_github_token }}" \
            https://api.github.com/repos/Autorama/autorama-app-config/contents/env/${{ inputs.app }}/.env.${{ inputs.env }}?ref=master \
            | jq -r ".content" | base64 --decode > .env.ci
          source .env.ci
          docker build -t ${{ secrets.grid_prod_repo_prefix }}/${{ inputs.app }}:${ARTEFACT_TAG} \
          --cache-from ${{ secrets.grid_prod_repo_prefix }}/${{ inputs.app }}:latest .

      # setup aws credentials for uat to push ecr image

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.ecr_region }}
          role-to-assume: ${{ secrets.grid_uat_gha_action_role }}
      - uses: aws-actions/amazon-ecr-login@v1
      - name: Docker push
        run: |
          ARTEFACT_TAG=${{ inputs.tag }}
          docker push ${{ secrets.grid_prod_repo_prefix }}/${{ inputs.app }}:${ARTEFACT_TAG}
          echo "Pushed image ${ARTEFACT_TAG}"
