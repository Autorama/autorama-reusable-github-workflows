name: ci-ror-workflow

on:
  workflow_call:
    inputs:
      env:
        description: "the environment"
        type: string
        required: true
      aws_region:
        description: "aws region"
        type: string
        required: true
      skip_artefact_caching:
        description: "set to true if there are no unit-test artefacts"
        type: boolean
        required: false
        default: false
      app:
        type: string
        required: true
      stack:
        type: string
        required: true
    secrets:
      git_token:
        required: true
      aws_role:
        required: true

jobs:
  init:
    runs-on: ubuntu-latest
    # These permissions are required to use Github OIDC.
    permissions:
      id-token: write
      contents: read

    steps:
      # Uses OIDC to assume the role in AWS rather than maintaining AWS credentials
      # in Github. There is a corresponding OIDC provider in IAM setup to receive tokens
      # from Github. See https://github.com/aws-actions/configure-aws-credentials#assuming-a-role
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws_region }}
          role-to-assume: ${{ secrets.aws_role }}
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Pull build-env-var script
        run: |
          curl https://build-env-var.s3.eu-west-2.amazonaws.com/build-env-var.linux-amd64 --output build-env-var.linux-amd64
          chmod +x build-env-var.linux-amd64
          ENV=${{ inputs.env }}
          AWS_REGION=${{ inputs.aws_region }}
          STACK=${{ inputs.stack }}

          curl \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{secrets.git_token}} " \
          https://api.github.com/repos/Autorama/autorama-app-config/contents/env/${{inputs.app}}/.env.ci?ref=master \
          > .tmp_curl
          response=$?
          if test "$response" != "0"; then
          	echo "the curl command failed with: $response"
          	exit 1
          else
              message="$(cat .tmp_curl | jq -r '.message')"
              echo "Here's message"
              echo $message
          	if [[ $message == "Bad credentials" ]] || [[ $message == "Not Found" ]]; then
          		echo "Error message"
          		echo $message
          		echo 'exiting'
          		exit 1
          	fi
          	cat .tmp_curl | jq -r ".content" | base64 --decode > .env
          	echo "suceeded"
          fi

          source .env
      - name: Run Unit Test
        run: |
          docker-compose -f docker-compose.ci.yml -p 123 build \
            --build-arg ENV=${{ inputs.env }} --build-arg GIT_TOKEN=${{ secrets.git_token }} \
            --build-arg CI=true web
          docker-compose -f docker-compose.ci.yml -p 123 run -u $(id -u) \
            -e HOME=/tmp -e RAILS_ENV=test web \
            bundle exec rspec --format RspecJunitFormatter --out results.xml \
            --format progress --format documentation
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: "**/results.xml"
      - name: collect unit-test artefacts
        if: ${{ inputs.skip_artefact_caching != true }}
        run: |
          mkdir unit-test-artefacts
          cp coverage/.resultset.json unit-test-artefacts/.resultset.json
          cp coverage/coverage.json unit-test-artefacts/coverage.json
          cp results.xml unit-test-artefacts/results.xml

          ls -lah unit-test-artefacts
      - name: Cache unit-test artefacts
        if: ${{ inputs.skip_artefact_caching != true }}
        uses: actions/cache@v3
        with:
          path: unit-test-artefacts
          key: unit-test-artefacts-${{ github.run_number }}
